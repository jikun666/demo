Python 实现node

from launch import LaunchDescription
from launch_ros.actions import Node
#封装终端指令相关类-------------
#from launch.actions import ExecuteProcess
#from launch.substitutions import FindExecutable
#参数声明与获取----------------
#from launch.actions import DeclareLaunchArgument
#from launch.substitutions import LaunchConfiguration
#文件包含相关------------------
#from launch.actions import IncludeLaunchDescription
#from launch.launch_description_sources import PythonLaunchDescriptionSource
#分组相关---------------------
#from launch_ros.actions import PushRosNamespace
#from launch.actions import GroupAction
#事件相关---------------------
#from launch.event_handlers import OnProcessStart, OnProcessExit
#from launch.actions import ExecuteProcess, RegisterEventHandler,LogInfo
#获取功能包下share目录路径-----
from ament_index_python.packages import get_package_share_directory
import os

"""
    需求：演示 Node 使用

    构造函数参数说明：

        :param: package 没执行的程序所属的功能包；
        :param: executable 可执行程序；
        :param: name 节点名称
        :param: namespace 设置命名空间
        :param: exec_name 设置程序标签
        :param: parameters 设置参数；
        :param: remappings 实现话题重映射；
        :param: arguments 为节点传参；  xx yy zz --ros-args
        :param: ros_arguments 为节点传参 --ros-args xx yy

"""

def generate_launch_description():
    turtle1 = Node(
        package="turtlesim",
        executable="turtlesim_node",
        exec_name="my_label",
        ros_arguments=["--remap","__ns:=/t2"]
        # ros2 run turtlesim turtlesim_node --ros-args --remap __ns:=/t2

    )
    turtle2 = Node(
        package="turtlesim",
        executable="turtlesim_node",
        respawn=True,
        name="haha",
        # 方式1（直接设置）
        # parameters=[{"background_r":225,"background_b":0,"background_g":0}]
        
        # 方式2（更常用），读取yaml文件(通过yaml文件的绝对路径读取)
        # parameters=["/root/ws02_tools/install/cpp01_launch/share/cpp01_launch/config/haha.yaml"]
        # 优化：动态获取路径
        parameters=[os.path.join(get_package_share_directory("cpp01_launch"),"config","haha.yaml")]
    )
    return LaunchDescription([turtle1,turtle2])


Python 实现执行指令

from launch import LaunchDescription
from launch_ros.actions import Node
#封装终端指令相关类-------------
from launch.actions import ExecuteProcess
from launch.substitutions import FindExecutable
#参数声明与获取----------------
#from launch.actions import DeclareLaunchArgument
#from launch.substitutions import LaunchConfiguration
#文件包含相关------------------
#from launch.actions import IncludeLaunchDescription
#from launch.launch_description_sources import PythonLaunchDescriptionSource
#分组相关---------------------
#from launch_ros.actions import PushRosNamespace
#from launch.actions import GroupAction
#事件相关---------------------
#from launch.event_handlers import OnProcessStart, OnProcessExit
#from launch.actions import ExecuteProcess, RegisterEventHandler,LogInfo
#获取功能包下share目录路径-----
#from ament_index_python.packages import get_package_share_directory
"""
    需求：启动turtlesim_node节点，并调用指令打印乌龟的位姿信息。

"""
def generate_launch_description():
    turtle = Node(
        package="turtlesim",
        executable="turtlesim_node",

    )
    # 封装指令
    cmd=ExecuteProcess(
        # cmd=["ros2 topic echo /turtle1/pose"],
        # cmd=["ros2 topic", "echo","/turtle1/pose"],

        cmd=[FindExecutable(name="ros2"),"topic", "echo","/turtle1/pose"],
        output="both",
        shell=True
    )
    return LaunchDescription([turtle,cmd])


Python 实现参数设置
from launch import LaunchDescription
from launch_ros.actions import Node
#封装终端指令相关类-------------
# from launch.actions import ExecuteProcess
# from launch.substitutions import FindExecutable
#参数声明与获取----------------
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration
#文件包含相关------------------
#from launch.actions import IncludeLaunchDescription
#from launch.launch_description_sources import PythonLaunchDescriptionSource
#分组相关---------------------
#from launch_ros.actions import PushRosNamespace
#from launch.actions import GroupAction
#事件相关---------------------
#from launch.event_handlers import OnProcessStart, OnProcessExit
#from launch.actions import ExecuteProcess, RegisterEventHandler,LogInfo
#获取功能包下share目录路径-----
#from ament_index_python.packages import get_package_share_directory
"""
    需求：动态设置turtlesim_node 的背景色
    实现：
        1.声明参数 （变量）
        2.调用参数 （变量）
        3.执行launch文件时动态导入参数

"""
def generate_launch_description():
    # 1.声明参数 （变量）
    bg_r = DeclareLaunchArgument(name="backg_r",default_value="255")
    bg_b = DeclareLaunchArgument(name="backg_b",default_value="255")
    bg_g = DeclareLaunchArgument(name="backg_g",default_value="255")
    # 2.调用参数 （变量）
    turtle = Node(
        package="turtlesim",
        executable="turtlesim_node",
        parameters=[{"background_r":LaunchConfiguration("backg_r"),
                     "background_b":LaunchConfiguration("backg_b"),
                     "background_g":LaunchConfiguration("backg_g")}]

    )       
    return LaunchDescription([bg_r,bg_b,bg_g,turtle])


Python 实现文件包含

from launch import LaunchDescription
from launch_ros.actions import Node
#封装终端指令相关类-------------
#from launch.actions import ExecuteProcess
#from launch.substitutions import FindExecutable
#参数声明与获取----------------
#from launch.actions import DeclareLaunchArgument
#from launch.substitutions import LaunchConfiguration
#文件包含相关------------------
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
#分组相关---------------------
#from launch_ros.actions import PushRosNamespace
#from launch.actions import GroupAction
#事件相关---------------------
#from launch.event_handlers import OnProcessStart, OnProcessExit
#from launch.actions import ExecuteProcess, RegisterEventHandler,LogInfo
#获取功能包下share目录路径-----
from ament_index_python.packages import get_package_share_directory
import os
"""
    需求：在当前launch文件包含其他launch文件。

"""
def generate_launch_description():
    include = IncludeLaunchDescription(
        launch_description_source= PythonLaunchDescriptionSource(
            launch_file_path=os.path.join(
                get_package_share_directory("cpp01_launch"),
                "launch/py",
                "py04_args_launch.py"
            )
        ),launch_arguments=[("backg_r","80"),("backg_g","100"),("backg_b","200")]
    )
    return LaunchDescription([include])


Python 实现分组设置

from launch import LaunchDescription
from launch_ros.actions import Node
#封装终端指令相关类-------------
#from launch.actions import ExecuteProcess
#from launch.substitutions import FindExecutable
#参数声明与获取----------------
#from launch.actions import DeclareLaunchArgument
#from launch.substitutions import LaunchConfiguration
#文件包含相关------------------
#from launch.actions import IncludeLaunchDescription
#from launch.launch_description_sources import PythonLaunchDescriptionSource
#分组相关---------------------
from launch_ros.actions import PushRosNamespace
from launch.actions import GroupAction
#事件相关---------------------
#from launch.event_handlers import OnProcessStart, OnProcessExit
#from launch.actions import ExecuteProcess, RegisterEventHandler,LogInfo
#获取功能包下share目录路径-----
#from ament_index_python.packages import get_package_share_directory
"""
    需求：创建三个turtlesim_node节点，然后将前两个划分为一组，第三个单独一组。

"""
def generate_launch_description():
    # 创建三个turtlesim_node
    t1 = Node(package="turtlesim",executable="turtlesim_node",name="t1")
    t2 = Node(package="turtlesim",executable="turtlesim_node",name="t2")
    t3 = Node(package="turtlesim",executable="turtlesim_node",name="t3")
    # 分组
    # 设置当前组命名空间，以及包含的节点
    g1 = GroupAction(actions=[PushRosNamespace("g1"),t1,t2])
    g2 = GroupAction(actions=[PushRosNamespace("g2"),t3])
    return LaunchDescription([g1,g2])


Python 实现时间设置
from launch import LaunchDescription
from launch_ros.actions import Node
#封装终端指令相关类-------------
from launch.actions import ExecuteProcess
#from launch.substitutions import FindExecutable
#参数声明与获取----------------
#from launch.actions import DeclareLaunchArgument
#from launch.substitutions import LaunchConfiguration
#文件包含相关------------------
#from launch.actions import IncludeLaunchDescription
#from launch.launch_description_sources import PythonLaunchDescriptionSource
#分组相关---------------------
#from launch_ros.actions import PushRosNamespace
#from launch.actions import GroupAction
#事件相关---------------------
from launch.event_handlers import OnProcessStart, OnProcessExit
from launch.actions import ExecuteProcess, RegisterEventHandler,LogInfo
#获取功能包下share目录路径-----
#from ament_index_python.packages import get_package_share_directory
"""
    为turtlesim—_node 绑定事件,节点启动时，执行生成新的乌龟的程序，关节点时，执行日志输出操作。

"""

def generate_launch_description():
    turtle = Node(
        package="turtlesim",
        executable="turtlesim_node"
    )
    # ros2 service call /spawn turtlesim/srv/Spawn "{'x':8.0,'y':3.0}"
    spawn = ExecuteProcess(
        cmd=["ros2 service call /spawn turtlesim/srv/Spawn \"{'x':8.0,'y':3.0}\""],
        output = "both",
        shell=True
    )
    # 注册事件1
    event_start = RegisterEventHandler(
        event_handler=OnProcessStart(
            target_action=turtle,
            on_start=spawn
        )
    )
    
    # 注册事件2
    event_exit = RegisterEventHandler(
        event_handler=OnProcessExit(
            target_action=turtle,
            on_exit=[LogInfo(msg="turtlesim_node 退出！")]
        )
    )
    
    return LaunchDescription([turtle,event_start,event_exit])